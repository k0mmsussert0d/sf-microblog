# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-04-17T00:55:50+00:00

from __future__ import annotations

from datetime import datetime
from typing import List, Optional

from microblog.models.base_model import BaseModel
from pydantic import Field


class NewPost(BaseModel):
    title: str = Field(..., description='Title of a new post')
    textContent: str = Field(..., description='Text content of a new post')


class NewPostWithMedia(BaseModel):
    postDetails: Optional[NewPost] = None
    mediaData: Optional[bytes] = None


class NewComment(BaseModel):
    postId: Optional[int] = Field(
        None, description='ID of the post comment is being added to'
    )
    textContent: Optional[str] = Field(None, description='Content of the comment')


class BasicUserDetails(BaseModel):
    username: str
    avatar: Optional[str] = Field(None, description='URL pointing to the avatar used')


class UserSummary(BaseModel):
    username: str
    avatar: Optional[str] = Field(None, description='URL pointing to the avatar used')
    joined: datetime = Field(..., description='Date and time of user account creation')


class NewUserDetails(BaseModel):
    avatar: Optional[str] = Field(None, description='URL of a new avatar image')


class BasicPost(BaseModel):
    id: int = Field(
        ...,
        description='Unique identifier of the post, started by 1 and autoincremented with each post and comment added',
    )
    author: BasicUserDetails
    title: str = Field(..., description='Title of the post')
    textContent: str = Field(..., description='Text content added in the post')
    imageUrl: Optional[str] = Field(
        None, description='URL to the image attached to the post'
    )
    commentsCount: int = Field(
        ..., description='Quantity of comments added to the post'
    )
    date: datetime = Field(..., description='Date and time when post was added')


class Comment(BaseModel):
    id: int = Field(
        ...,
        description='Unique identifier of the comment, started by 1 and autoincremented with each post and comment added',
    )
    author: BasicUserDetails
    content: str = Field(..., description='Content of a comment')
    date: datetime = Field(..., description='Date and time when comment was added')


class UserDetails(BaseModel):
    summary: UserSummary
    posts: Optional[List[BasicPost]] = Field(
        [], description='List of posts user has added'
    )
    comments: Optional[List[Comment]] = Field(
        [], description='List of comments user has added'
    )


class Post(BaseModel):
    id: int = Field(
        ...,
        description='Unique identifier of the post, started by 1 and autoincremented with each post and comment added',
    )
    author: BasicUserDetails
    title: str = Field(..., description='Title of the post')
    textContent: str = Field(..., description='Text content added in the post')
    comments: Optional[List[Comment]] = Field(
        [], description='List of comments of a post'
    )
    date: datetime = Field(..., description='Date and time when post was added')
    imageId: Optional[str] = Field(
        None, description='ID of the image attached to the post'
    )


class PostList(BaseModel):
    __root__: List[Post]
