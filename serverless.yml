service: sf-microblog
frameworkVersion: '2'

useDotenv: true
provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: '20201221'
  environment:
    DOMAIN_PREFIX: ${self:service}-${opt:stage, self:provider.stage, 'dev'}
    POSTS_TABLE: ${self:provider.environment.DOMAIN_PREFIX}-posts-table
    COMMENTS_TABLE: ${self:provider.environment.DOMAIN_PREFIX}-comments-table
    COGNITO_USER_POOL: ${self:provider.environment.DOMAIN_PREFIX}-user-pool
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.POSTS_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.COMMENTS_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.POSTS_TABLE}/index/*"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.COMMENTS_TABLE}/index/*"
  httpApi:
    cors: true
    authorizers:
      userPoolAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: 
          Fn::Join:
          - ''
          - - 'https://cognito-idp.'
            - '${opt:region, self:provider.region}'
            - '.amazonaws.com/'
            - Ref: userPool
        audience:
          - Ref: userPoolClient

functions:
  posts:
    handler: microblog.handlers.posts
    events:
      - httpApi:
          path: /post
          method: GET
      - httpApi:
          path: /post
          method: POST
          authorizer: userPoolAuthorizer
      - httpApi:
          path: /post/{id}
          method: GET
      - httpApi:
          path: /post/{id}
          method: PUT
          authorizer: userPoolAuthorizer
      - httpApi:
          path: /post/{id}
          method: DELETE
          authorizer: userPoolAuthorizer
  comment:
    handler: microblog.handlers.comment
    events:
      - httpApi:
          path: /comment
          method: POST
          authorizer: userPoolAuthorizer
      - httpApi:
          path: /comment/{id}
          method: PUT
          authorizer: userPoolAuthorizer
      - httpApi:
          path: /comment/{id}
          method: DELETE
          authorizer: userPoolAuthorizer
  user:
    handler: microblog.handlers.user
    events:
      - httpApi:
          path: /user
          method: GET
          authorizer: userPoolAuthorizer
      - httpApi:
          path: /user
          method: PUT
          authorizer: userPoolAuthorizer
      - httpApi:
          path: /user/{username}
          method: GET

resources:
  Resources:
    HttpApi:
      Type: 'AWS::ApiGatewayV2::Api'
      DependsOn: userPool
    userPool:
      Type: 'AWS::Cognito::UserPool'
      Properties:
        UserPoolName: ${self:provider.environment.COGNITO_USER_POOL}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
    userPoolClient:
      Type: 'AWS::Cognito::UserPoolClient'
      Properties:
        ClientName: ${self:provider.environment.DOMAIN_PREFIX}-user-pool-client
        AllowedOAuthFlows:
          - implicit
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
          - phone
          - email
          - openid
          - profile
          - aws.cognito.signin.user.admin
        UserPoolId:
          Ref: userPool
        CallbackURLs: 
          - https://localhost:3000
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        GenerateSecret: false
        SupportedIdentityProviders: 
          - COGNITO
    userPoolDomain:
      Type: 'AWS::Cognito::UserPoolDomain'
      Properties:
        UserPoolId: 
          Ref: userPool
        Domain: ${self:provider.environment.DOMAIN_PREFIX}-user-pool-domain
    PostsTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:provider.environment.POSTS_TABLE}
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
          - AttributeName: authorSub
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: gsiUserPosts
            KeySchema:
              - AttributeName: authorSub
                KeyType: HASH
              - AttributeName: id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
    CommentsTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:provider.environment.COMMENTS_TABLE}
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
          - AttributeName: postId
            AttributeType: N
        GlobalSecondaryIndexes:
          - IndexName: gsiPostComments
            KeySchema:
              - AttributeName: postId
                KeyType: HASH
              - AttributeName: id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
package:
  exclude:
    - .aws-sam/**
    - .idea/**
    - tests/**
    - node_modules/**
    - venv/**
plugins:
  - serverless-python-requirements
custom:
  pythonRequirements:
    dockerizePip: non-linux
