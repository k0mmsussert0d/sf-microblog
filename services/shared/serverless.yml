service: sf-microblog-shared
frameworkVersion: '2'

useDotenv: true
provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: '20201221'
  environment:
    DOMAIN_PREFIX: ${self:service}-${opt:stage, self:provider.stage, 'dev'}
    API_GATEWAY: ${self:provider.environment.DOMAIN_PREFIX}-api-gw
    POSTS_TABLE: ${self:provider.environment.DOMAIN_PREFIX}-posts-table
    COMMENTS_TABLE: ${self:provider.environment.DOMAIN_PREFIX}-comments-table
    COGNITO_USER_POOL: ${self:provider.environment.DOMAIN_PREFIX}-user-pool

resources:
  Resources:
    HttpApi:
      Type: 'AWS::ApiGatewayV2::Api'
      DependsOn: UserPool
      Properties:
        Name: ${self:provider.environment.API_GATEWAY}
        ProtocolType: HTTP
        CorsConfiguration:
          AllowOrigins:
            - '*'
          AllowHeaders:
            - 'Content-Type'
            - 'X-Amz-Date'
            - 'Authorization'
            - 'X-Api-Key'
            - 'X-Amz-Security-Token'
            - 'X-Amz-User-Agent'
          AllowMethods:
            - GET
            - POST
            - PUT
            - DELETE
            - OPTIONS

    HttpApiAuthorizer:
      Type: 'AWS::ApiGatewayV2::Authorizer'
      Properties:
        Name: ${self:provider.environment.API_GATEWAY}-authorizer
        ApiId:
          Ref: HttpApi
        AuthorizerType: JWT
        IdentitySource:
          - $request.header.Authorization
        JwtConfiguration:
          Audience:
            - Ref: UserPoolClient
          Issuer:
            Fn::Join:
              - ''
              - - 'https://cognito-idp.'
                - '${opt:region, self:provider.region}'
                - '.amazonaws.com/'
                - Ref: UserPool

    HttpApiStage:
      Type: 'AWS::ApiGatewayV2::Stage'
      Properties:
        ApiId:
          Ref: HttpApi
        StageName: '$default'
        AutoDeploy: true
        DefaultRouteSettings:
          DetailedMetricsEnabled: false

    UserPool:
      Type: 'AWS::Cognito::UserPool'
      Properties:
        UserPoolName: ${self:provider.environment.COGNITO_USER_POOL}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Schema:
          - Name: email
            Required: true
            Mutable: true
          - Name: preferred_username
            Required: true
            Mutable: true

    UserPoolClient:
      Type: 'AWS::Cognito::UserPoolClient'
      Properties:
        ClientName: ${self:provider.environment.DOMAIN_PREFIX}-user-pool-client
        AllowedOAuthFlows:
          - implicit
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
          - phone
          - email
          - openid
          - profile
          - aws.cognito.signin.user.admin
        UserPoolId:
          Ref: UserPool
        CallbackURLs:
          - https://localhost:3000
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        GenerateSecret: false
        SupportedIdentityProviders:
          - COGNITO

    UserPoolDomain:
      Type: 'AWS::Cognito::UserPoolDomain'
      Properties:
        UserPoolId:
          Ref: UserPool
        Domain: ${self:provider.environment.DOMAIN_PREFIX}-user-pool-domain

    PostsTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:provider.environment.POSTS_TABLE}
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
          - AttributeName: authorSub
            AttributeType: S
          - AttributeName: date
            AttributeType: N
          - AttributeName: active
            AttributeType: N
        GlobalSecondaryIndexes:
          - IndexName: gsiUserPosts
            KeySchema:
              - AttributeName: authorSub
                KeyType: HASH
              - AttributeName: id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: gsiAllPostsSorted
            KeySchema:
              - AttributeName: active
                KeyType: HASH
              - AttributeName: date
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    CommentsTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:provider.environment.COMMENTS_TABLE}
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
          - AttributeName: postId
            AttributeType: N
          - AttributeName: authorSub
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: gsiPostComments
            KeySchema:
              - AttributeName: postId
                KeyType: HASH
              - AttributeName: id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: gsiUserComments
            KeySchema:
              - AttributeName: authorSub
                KeyType: HASH
              - AttributeName: id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    UploadsBucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: ${self:provider.environment.DOMAIN_PREFIX}-uploads-bucket
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - "PUT"
                - "POST"
                - "DELETE"
              AllowedOrigins:
                - "https://*.amazonaws.com"
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - "GET"
              AllowedOrigins:
                - "*"

    AvatarsBucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: ${self:provider.environment.DOMAIN_PREFIX}-avatars-bucket

  Outputs:
    HttpApiId:
      Value:
        Ref: HttpApi
      Export:
        Name: ${self:provider.environment.DOMAIN_PREFIX}-HttpApiId

    HttpApiAuthorizerId:
      Value:
        Ref: HttpApiAuthorizer
      Export:
        Name: ${self:provider.environment.DOMAIN_PREFIX}-HttpApiAuthorizerId

    CognitoUserPoolId:
      Value:
        Ref: UserPool
      Export:
        Name: ${self:provider.environment.DOMAIN_PREFIX}-CognitoUserPoolId

    CognitoUserPoolClientId:
      Value:
        Ref: UserPoolClient
      Export:
        Name: ${self:provider.environment.DOMAIN_PREFIX}-CognitoUserPoolClientId

    PostsTableName:
      Value:
        Ref: PostsTable
      Export:
        Name: ${self:provider.environment.DOMAIN_PREFIX}-PostsTableName

    CommentsTableName:
      Value:
        Ref: CommentsTable
      Export:
        Name: ${self:provider.environment.DOMAIN_PREFIX}-CommentsTableName

    UploadsBucketName:
      Value:
        Ref: UploadsBucket
      Export:
        Name: ${self:provider.environment.DOMAIN_PREFIX}-UploadsBucket

    AvatarsBucketName:
      Value:
        Ref: AvatarsBucket
      Export:
        Name: ${self:provider.environment.DOMAIN_PREFIX}-AvatarsBucket
